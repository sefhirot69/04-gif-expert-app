{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","map","id","images","title","img","downsized_medium","useFetchGifs","loading","state","setState","useEffect","GifGridItem","className","src","alt","GifGrid","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"sKAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,qBC8BCQ,MA9Bf,YAAuC,IAAjBC,EAAgB,EAAhBA,cAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,mCACI,sBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,e,+BCXzBG,EAAO,uCAAG,WAAQC,GAAR,qBAAAC,EAAA,6DAENC,EAFM,uDADD,mCACC,cAE4DC,UAAUH,GAFtE,sBAIOI,MAAMF,GAJb,cAING,EAJM,gBAKSA,EAAKC,OALd,uBAKLC,EALK,EAKLA,KALK,kBAOLA,EAAKC,KAAI,YAA0B,IAAxBC,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,OAClB,MAAO,CACHD,GAAIA,EACJE,MAHiC,EAAXA,MAItBC,IAAG,OAAEF,QAAF,IAAEA,OAAF,EAAEA,EAAQG,iBAAiBX,SAX1B,2CAAH,sDAiBEH,ICMAe,EArBM,SAACd,GAElB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACNnB,EAAQC,GAAUtB,MAAK,SAAAgC,GAEnBO,EAAS,CACLV,KAAMG,EACNK,SAAS,SAIlB,CAACf,IAEGgB,GCJIG,EAdK,SAAC,GAAqB,EAApBV,GAAqB,IAAjBG,EAAgB,EAAhBA,IAAKD,EAAW,EAAXA,MAE3B,OACI,sBAAKS,UAAU,2DAAf,UACI,qBAAKC,IAAMT,EAAMU,IAAKX,IACtB,4BAAIA,QCyBDY,MA1Bf,YAA8B,IAAZvB,EAAW,EAAXA,SAEd,EAAgCc,EAAad,GAAhCU,EAAb,EAAOH,KAAcQ,EAArB,EAAqBA,QAErB,OACI,qCACI,6BAAKf,IACL,mBAAGoB,UAAU,mCAAb,SAAiDL,GAAW,iBAC5D,qBAAKK,UAAU,YAAf,SAEQV,EAAOF,KAAI,SAACI,GAAD,OAEH,cAAC,EAAD,eAEQA,GADCA,EAAIH,aCE1Be,EAjBM,WAEjB,MACItC,mBAAS,CAAC,cADd,mBAAOuC,EAAP,KAAmBxC,EAAnB,KAGA,OAAO,qCACH,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGIwC,EAAWjB,KAAI,SAAAR,GAAQ,OAAI,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,U,MCVrD0B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BtD,M","file":"static/js/main.0c833f07.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nAddCategory.propTypes = {\n    setCategories : PropTypes.func.isRequired\n};\n\nfunction AddCategory({setCategories}) {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if( inputValue.trim().length > 2) {\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n    };\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={handleInputChange}\n                />\n            </form>\n        </>\n    );\n}\n\nexport default AddCategory;","const apiKey = 'e9NDh0olczBjgyILGqOmmHjmnNoolbnY';\nconst getGifs = async ( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${encodeURI(category)}&limit=10`;\n\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    return data.map(({id, images, title}) => {\n        return {\n            id: id,\n            title: title,\n            img: images?.downsized_medium.url\n        };\n    })\n\n}\n\nexport default getGifs;","import {useEffect, useState} from \"react\";\nimport getGifs from \"../helpers/getGifs\";\n\nconst useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true,\n    });\n\n    useEffect(() => {\n        getGifs(category).then(images => {\n\n            setState({\n                data: images,\n                loading: false\n            });\n\n        })\n    }, [category]);\n\n    return state;\n};\n\nexport default useFetchGifs;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GifGridItem = ({id, img, title}) => {\n\n    return (\n        <div className='card animate__animated animate__fadeIn animate__delay-1s'>\n            <img src={ img } alt={title}/>\n            <p>{title}</p>\n        </div>\n    );\n};\n\nGifGridItem.propTypes = {\n    \n};\n\nexport default GifGridItem;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useFetchGifs from \"../hooks/useFetchGifs\";\nimport GifGridItem from \"./GifGridItem\";\n\nGifGrid.propTypes = {};\n\nfunction GifGrid({category}) {\n\n    const {data: images, loading} = useFetchGifs(category);\n\n    return (\n        <>\n            <h3>{category}</h3>\n            <p className='animate__animated animate__flash'>{loading && 'Cargando ...'}</p>\n            <div className=\"card-grid\">\n                {\n                    images.map((img) =>\n                        (\n                            <GifGridItem\n                                key={img.id}\n                                {...img}\n                            />\n                        )\n                    )\n                }\n\n            </div>\n        </>\n\n    );\n}\n\nexport default GifGrid;","import React, {useState} from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\n\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] =\n        useState(['One Punch']);\n\n    return <>\n        <h2>GifExpertApp</h2>\n        <AddCategory setCategories={setCategories}/>\n        <hr/>\n\n        {\n            categories.map(category => <GifGrid key={category} category={category}/>)\n        }\n\n    </>\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport GifExpertApp from \"./GifExpertApp\";\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}